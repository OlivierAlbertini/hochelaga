// @file forms.scss

label {
  font-weight: $font-weight-regular;
  line-height: $line-height-lg;
}

/*
// Radios and checkboxes - common rules
.checkbox,
.radio {
  input {
    position: relative;
    margin: 0 1.6rem 0 0;

    &:before,
    &:after {
      position: absolute;
      content: "";
    }

    // The background - centering w/ native element is key;
    &:before {
      left: -0.2rem;
      top: -0.2rem;
      width: 1.4rem;
      height: 1.4rem;
      background: $input-disabled-bg;
      border-radius: 0.2rem;
    }

    // The selection
    &:after {
      z-index: 1;
      width: 1rem;
      height: 1rem;
    }
  }
}
*/
/*
// Checkboxes
.checkbox {
  input {
    // The checkmark
    &:after {
      top: 0.125em;
      left: 0.09em;
      transform: rotate(-45deg);
      width: 0.85rem;
      height: 0.35rem;
    }

    // The tranformed rectangle, titled 45 degrees with 2 out of 4 borders
    &:checked {
      &:after {
        border: 1px solid $vdm-brand;
        border-top-style: none;
        border-right-style: none;
      }
    }
  }
}
*/

/*
.form-check {
  &.checkbox-vfi {
    label {
      @include pseudo-form-element();
    }
    input[type="checkbox"] {
      @extend .custom-control-input;

      & + label {
        &:after {
          content: none;
        }
      }

      &:checked {
        & + label {
          @include iconvfi(after, mini-case-coche-coche);
        }
      }

      &:focus {
        & + label {
          &:after {
            outline: $vdm-brand auto 5px;
          }
        }
      }
    }
  }
}

*/

//
// Radio buttons
//

/*
.radio {
  input {
    &:before,
    &:after {
      border-radius: 50%;
    }

    // The background of the input
    &:before {
      width: 1.5rem;
      height: 1.5rem;
      left: -0.25rem;
      top: -0.25rem;
    }

    // The inner circle for the checked checkbox
    &:after {
      width: 0.65rem;
      height: 0.65rem;
      transform: translate(0.2rem, 0.2rem);
    }

    // The selected, circular input
    &:checked {
      &:after {
        background-color: $vdm-brand;
      }
    }
  }
}
*/

// Fix the inline margin-tops for inline display;
/*
.checkbox,
.radio {
  &.checkbox-inline,
  &.radio-inline {
    margin-top: 0;
  }
}
*/

///////////////////////////////////////////////////////////////////
// Textfields and textareas

.form-group {
  position: relative;
  margin-top: 3rem;

  &.compact {
    margin-top: 2rem; // The smallest possible value to accomodate the label
  }

  &.required {
    label {
      &:after {
        content: "*";
        color: $vdm-sub-brand;
        display: inline-block;
        margin-left: 0.25em;
      }
    }
  }
  // input,
  // textarea,
  // select {
  .form-control {
    font-size: $font-size-base;
    box-shadow: none;
    transition: none;
    border: 1px solid $vdm-grey-light;
    border-radius: 0;

    &:focus {
      border: 1px solid $vdm-brand;
    }

    // Move the label
    // When the field is selected
    // Once the field is filled (js toggle class "used")
    &:focus,
    &.used {
      & ~ label {
        top: -26px;
        left: 10px;
        font-size: $font-size-xs;
        color: $black;
      }
    }
    &.used {
      color: $black;
      border: 1px solid $black;
    }

  }

  // }

  label {
    color: $vdm-grey;
    position: absolute;
    pointer-events: none;
    left: 10px;
    top: 8px;
    transition: 0.2s ease all;
  }

  .help-block {
    margin-left: 10px;
    font-size: $font-size-xs;
  }

  // Feedback icons
  &.has-feedback {
    .form-control {
      padding-right: 2em;
      position: relative;
    }

    &:after {
      font-size: 2rem;
      width: 2rem;
      height: 2rem;
      position: absolute;
      left: calc(100% - 2.3rem);
      top: -0.3rem;
    }

    &.has-error {
      @include iconvfi(after, mini-x);
      color: $vdm-sub-brand;

      .form-control {
        color: $form-feedback-invalid-color !important;
        border: 1px solid $form-feedback-invalid-color;
        &:focus,
        &.used {
          border: 1px solid $form-feedback-invalid-color;
        }
      }

      .help-block {
        color: $form-feedback-invalid-color;
        margin-left: 0;
      }
    }
    &.has-success {
      @include iconvfi(after, mini-case-coche-coche);
      color: $vdm-brand;
    }
  } // Feedback

  // Defines a textfield with an icon inside the field directly, as in a password field
  &.has-icon {
    .vfi {
      font-size: 2.2rem;
      position: absolute;
      color: $vdm-grey;
      position: absolute;
      pointer-events: none;
      top: 0;
      color: $vdm-brand;
    }

    &.ic-left {
      .vfi {
        left: 0.3rem;
      }
      label {
        left: calc(10px + 2.1rem);
      }
      .form-control {
        padding-left: 3rem;
      }
    }
    &.ic-right {
      .vfi {
        left: calc(100% - 2.4rem);
      }
      .form-control {
        padding-right: 3rem;
      }
    }

    &.has-error {
      .vfi {
        color: $black;
      }
    }
  }

  &.ghost {
    .form-control {
      border: 0;
    }
  }
}

// Select
.vdm-select-wrapper {
  background-color: #fff;
  display: inline-block;
  position: relative;
  margin-top: 3em;

  &:before,
  &:after {
    background-color: $white;
    font-size: 1.9rem;
    position: absolute;
    top: 0.1rem;
    z-index: 2;
    display: block;
    width: 34px;
    height: floor(34px * 0.95);
    line-height: floor(34px * 0.95);
    text-align: center;
    pointer-events: none;
  }

  @include iconvfi(after, chevron-bas);

  // Case with a left icon as well
  // Ex : select borough
  &.icon-left {
    .vfi {
      //display: inline-block;
      position: absolute;
      left: 0.2rem;
      top: 50%;
      transform: translateY(-50%);
      color: #429a8e;
      font-size: 1.9em;
    }
    &.location {
      @include iconvfi(after, chevron-bas);
      &.select-open {
        @include iconvfi(after, chevron-haut);
      }
    }
    .vdm-select {
      padding-left: 2.5rem;
    }
    &.select-open {
      color: $vdm-grey;
    }
  }

  // See javascript file for this behaviour.
  &.select-open {
    @include iconvfi(after, chevron-haut);
  }

  &:before {
    left: 0.4rem;
    color: $vdm-brand;
  }
  &:after {
    right: 0.2rem;
  }

  // @to-do - implement a 'has-label' class on parent element? Inline vs block label?
  label {
    font-size: $font-size-xs;
    color: $black;
    position: absolute;
    pointer-events: none;
    left: 18px;
    top: -26px;
  }
}

select {
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  //max-width: 300px;
  &.form-control {
    &.vdm-select {
      border-radius: 0;
      box-shadow: none;
      border: 1px solid $vdm-grey-light;
      &:focus {
        box-shadow: none;
        border: 1px solid $vdm-brand;
      }
    }
  }
}

// Search box combo with a header, a wrapper with a fat bottom stroke
// containing an icon and a seach field. A submit button completes the picture.
// @see molecules-search-field-combo
.form-combo {
  padding: 1.8rem;
  flex-wrap: wrap;
  align-items: center;

  &.icon-combo {
    .vfi {
      font-size: 2.4rem;
      width: 2.4rem;
      height: 2.4rem;
    }
  }

  .title {
    font-size: $font-size-base;
    line-height: $line-height-lg;
    font-weight: $font-weight-bold;
    width: 100%;
  }

  .vdm-btn {
    margin-bottom: 0;
    position: relative;
    margin-top: 0.1rem;
  }

  .input-wrapper {
    padding: 1rem 0.5rem 0.5rem 0.5rem;
    align-items: center;
    flex: 1 0;
    margin-right: 1rem;

    > * {
      margin-right: 0.5rem;
    }

    :last-child {
      margin-right: 0;
    }

    &.stroked {
      border-bottom: 3px solid $black;
    }

    .form-group {
      margin-top: 0;
      margin-bottom: 0;
      width: 100%;

      label {
        top: 16px;
      }
      .form-control {
        border: none;
        line-height: 2.1;
        &:focus {
          border: none;
        }

        &:focus,
        &.used {
          & ~ label {
            display: none;
          }
        }
      }
    }
  }

  // Extra modifier classes when the button is inside the inner wrapper
  &.inline-button {
    .input-wrapper {
      width: 100%;
      margin-right: 0;
    }
    .vdm-btn {
      position: static;
    }
  }

  @include media-breakpoint-down(xs) {
    .input-wrapper {
      flex-basis: 100%;
    }
    .vdm-btn {
      margin: 1rem auto 0 auto;
      align-self: center;
      &:last-of-type {
        margin: 1rem auto 0 auto;
      }
    }

    // Extra modifier classes when the button is inside the inner wrapper
    &.inline-button {
      .input-wrapper {
        flex-basis: 100%;
        position: relative;
        margin-bottom: 1.5 * $vdm-btn-height;
      }
      .vdm-btn {
        position: absolute;
        top: 1.5 * $vdm-btn-height;
        left: 50%;
        transform: translateX(-50%);
      }
    }
  }
}

// Checkboxes
//
// use vfi

.custom-checkbox {
  margin-bottom: $custom-control-spacer-y;

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      background-image: none;
      font-size: 2rem;
      line-height: 1;
      color: $vdm-brand;
    }
    @include iconvfi(after, mini-case-coche-coche);
  }

  .custom-control-input:indeterminate ~ .custom-control-label {
    &::after {
      background-image: none;
    }
  }
}

// Radios
//
// Tweak just a few things for radios.

.custom-radio {
  margin-bottom: $custom-control-spacer-y;

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      border-radius: 50%;
      width: 0.6875rem;
      height: 0.6875rem;
      transform: translate(0.59375rem, 0.59375rem);
      background-color: $vdm-brand;
    }
  }
}

// Switches - Checkboxes as state toggles
// -------------------------

.checkbox-toggle {
  // Massive negative offset clears the original checkbox & label.
  position: relative;
  input {
    &[type="checkbox"] {
      position: absolute;
      left: -10000px;
      visibility: hidden;

      // Graphics container
      & + label {
        position: relative;
        text-indent: -10000px;
        height: $checkbox-toggle-height;
        width: $checkbox-toggle-width;
        user-select: none;
        cursor: pointer;

        &:before,
        &:after {
          display: block;
          position: absolute;
          content: "";
        }

        // Inside button
        &:after {
          top: $checkbox-toggle-padding;
          left: $checkbox-toggle-padding;
          bottom: $checkbox-toggle-padding;
          right: $checkbox-toggle-padding;
          background-color: $custom-control-indicator-checked-color;
          border-radius: $checkbox-toggle-border-radius;
          width: $checkbox-toggle-width-inside;
          -webkit-transition: 0.3s;
          transition: 0.3s;
        }

        // Outside pill
        &:before {
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          background-color: transparent;
          border: $checkbox-toggle-border-width solid
            $custom-control-indicator-checked-color;
          border-radius: $checkbox-toggle-border-radius-inside;
          width: $checkbox-toggle-width;
        }
      }

      &[checked="checked"] {
        & + label {
          // Inside button
          &:after {
            background-color: $white;
            margin-left: $checkbox-toggle-width-inside +
              $checkbox-toggle-padding;
          }

          // Outside pill
          &:before {
            background-color: $custom-control-indicator-checked-color;
            border: 0;
          }
        }
      } //  Checked

      &:checked {
        & + label {
          // Inside button
          &:after {
            background-color: $white;
            margin-left: $checkbox-toggle-width-inside +
              $checkbox-toggle-padding;
          }

          // Outside pill
          &:before {
            background-color: $custom-control-indicator-checked-color;
            border: 0;
          }
        }
      } //  Checked

      &:disabled {
        & + label {
          cursor: not-allowed;
          // Inside button
          &:after {
            background-color: $white;
            margin-left: 0;
          }

          // Outside pill
          &:before {
            background-color: $custom-control-indicator-disabled-bg;
            border: 0;
          }
        }
      } //  Disabled

      &:disabled {
        &:checked {
          & + label {
            // Inside button
            &:after {
              margin-left: $checkbox-toggle-width-inside +
                $checkbox-toggle-padding;
            }

            // Outside pill
            &:before {
              background-color: $custom-control-indicator-disabled-bg;
            }
          }
        }

        &:checked {
          & + label {
            // Inside button
            &:after {
              margin-left: $checkbox-toggle-width-inside +
                $checkbox-toggle-padding;
            }

            // Outside pill
            &:before {
              background-color: $custom-control-indicator-disabled-bg;
            }
          }
        }
      } //  Disabled & checked
    }
  }
}
