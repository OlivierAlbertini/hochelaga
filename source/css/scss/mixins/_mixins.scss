// @file mixins.scss

/**
 * - - - - - - - - - -
 * == Typography
 * - - - - - - - - - -
 */

// @arg $level - integrer [1-6]
// @arg $weight - string ['light','regular','bold']
@mixin heading($level: 1, $weight: "regular", $display: block) {
  color: $headings-color;
  font-family: $font-family-base;
  font-weight: $headings-font-weight;
  display: $display;

  @if $level == 1 {
    font-size: $h1-font-size;                             // 52px
    line-height: get-line-height($h1-font-size, 64px);    // 64px
  }
  @if $level == 2 {
    font-size: $h2-font-size;                             // 45px
    line-height: get-line-height($h2-font-size, 56px);    // 56px
  }
  @if $level == 3 {
    font-size: $h3-font-size;                             // 39px
    line-height: get-line-height($h3-font-size, 48px);    // 48px
  } 
  @if $level == 4 {
    font-size: $h4-font-size;                             // 32px
    line-height: get-line-height($h4-font-size, 40px);    // 40px
  } 
  @if $level == 5 {
    font-size: $h5-font-size;                             // 26px
    line-height: get-line-height($h5-font-size, 32px);    // 32px
  } 
  @if $level == 6 {
    font-size: $h6-font-size;                             // 19px
    line-height:get-line-height($h6-font-size, 24px);     // 24px
  }

  @if $weight == "bold" {
    font-weight: $font-weight-bold;
  }
}
/*
@mixin font-size($font-size: $font-size-lg, $line-height: $line-height-sm, font-weight: $font-weight-normal) {
  font-size: $font-size;
  font-weight: $font-weight;
  line-height: $line-height;
}
*/

// Card heading
@mixin card-heading($font-size: $font-size-xl, $line-height: get-line-height($font-size-xl,32px), $font-weight: $font-weight-regular, $color: $headings-color, $display: block) {
  color: $color;
  display: $display;
  font-weight: $font-weight;
  font-size: $font-size;
  line-height: $line-height;
}

//  @arg $size - string - any valid text size declaration
//  @arg $color - string any valid color declaration
//  @arg $color - string any valid color declaration
@mixin bullet-left($size: 0.8em, $color: $primary, $textcolor: $black) {
  display: inline-block;
  position: relative;
  padding-left: $size * 1.75;
  color: $textcolor;
  &:before {
    content: " ";
    position: absolute;
    display: block;
    left: 0;
    top: 46%; // Perceptual
    transform: translateY(-50%);
    background: $color;
    border-radius: $size;
    width: $size;
    height: $size;
  }
}


/**
  * Vdm fonticon mixin
  *
  * @arg $position [string] - [before, after, both]
  * @arg $icon [string or false] - a member of the $vdmicons variable
  * @arg $styles [boolean] - whether the extra styles rules should be applied or just the content attribute
  *
  * Usage 
  * .some-class {
  *     @include iconvfi(before, rosace);
  * }
  *
  */
@mixin iconvfi($position: before, $icon: false, $styles: true) {
  @if $position == both {
    $position: "before, &:after";
  }
  // Either a :before or :after pseudo-element, or both, defaulting to :before
  &:#{$position} {
    @if $icon {
      //  @debug($icon);
      $index: str-index($icon, "vfi-");
      @if $index {
        $icon: str-replace($icon, "vfi-", "");
        // @debug("replaced icon : " $icon);
      }
      // A specific icon has been designated
      content: "#{map-get($vdmicons, vfi- + $icon)}";
      // @debug(vfi- + $icon);
      // @debug(#{map-get($vdmicons, vfi- + $icon)});
    }
    @if $styles {
      font-weight: normal;
      font-style: normal;
      font-family: $vfi-icon-font-family;
      text-decoration: none;
      display: inline-block;
      text-rendering: auto;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    @content;
  }
}

// Generates a block-level link with an icon in the after position;
@mixin icon-block-link( $icon : fleche-droite, $size: false ) {
  display: block;
  position: relative;
  background: transparent;
  @include iconvfi(after, $icon);

  &:after {
    position: absolute;
    left: calc(100% - 1.25em);
    top: 50%;
    transform: translateY(-50%);
    right: 0;
    line-height: 1;
  }

  @if $size {
    &:after {
      font-size: $size;
      left: calc(100% - #{ $size / 2 });
    }
  }
}

// Add background variant to .header-banner.
//
// @see badge-variant mixins
@mixin banner-variant($bg) {
  color: color-yiq($bg);
  background-color: $bg;
  
  a {
    color: color-yiq($bg);
  }
}

// Add color variant to .progress-bar.
//
// @see badge-variant mixins
@mixin progress-variant($bg) {
  .progress-bar {
    border-color: $bg;
  }
}

// Badge variant

@mixin badge-outline-variant($color) {
  color: $color;
  background-color: transparent;
  border: 1px solid $color;

  &[href] {
    @include hover-focus {
      color: $color;
      text-decoration: none;
      border-color: darken($color, 10%);
    }
  }
}

// Add badge outline variants
//
// Contextual variations (linked badges get darker on :hover).

@each $color, $value in $theme-colors {
  .badge-outline-#{$color} {
    @include badge-outline-variant($value);
  }
}

/**
 * - - - - - - - - - -
 * == UI
 * - - - - - - - - - -
 */

//== Accents
// - - - - - - - - - -

@mixin drop-shadow(
    $dist-top: 0,
    $dist-right: 5px,
    $dist-bottom: 11px,
    $dist-left: 0 ,
    $color-r: 0,
    $color-g: 0,
    $color-b: 0,
    $opacity: 0.27
  ) {
  box-shadow: $dist-top $dist-right $dist-bottom $dist-left
    rgba($color-r, $color-g, $color-b, $opacity);
}

/**
 * - - - - - - - - - -
 * == Forms
 * - - - - - - - - - -
 */


// Buttons
//
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $border-radius;
  } @else {
    border-radius: 0;
  }
}

@mixin button-alter($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 25%);
  }
  &:hover {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 12%);
  }
}

// Button sizes
@mixin button-alter-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}


/**
 * - - - - - - - - - -
 * == Utilities
 * - - - - - - - - - -
 */

 @mixin button-reset() {
  color: inherit;
  font: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;
 }

 //@include n-columns(200px,  10px, true, 5);
@mixin n-columns($child-selector, $min-width, $gutter, $last-equal: false, $max-cols: 5) {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$gutter;
  margin-top: -$gutter;

  > #{ $child-selector } {
    flex: 1 0 $min-width;
    margin-left: $gutter;
    margin-top: $gutter;

    @if $last-equal {
      @for $i from 2 through $max-cols {
        $screen-width: ($min-width*$i)+($gutter*$i);
        $column-width: (100%/$i);
        @media (min-width: $screen-width) {
          max-width: calc(#{$column-width} - #{$gutter});
        }
      }

      $column-width: (100%/$max-cols);
      @media (min-width: $min-width*$max-cols) {
        min-width: calc(#{$column-width} - #{$gutter});
      }
    }
  }
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// Creates a filled circle
@mixin circle($size: 1rem, $background-color: $primary, $border: false, $border-color: $gray-600) {
  background-color: $background-color;
  border-radius: 50%;
  content: "";
  display: block;
  width: $size;
  height: $size;

  @if $border {
    border: 1px solid $border-color;
  }
}

