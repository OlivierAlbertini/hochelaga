// Sticky footer
//
/**
 * 1. Avoid the IE 10-11 `min-height` bug.
 * 2. Set `flex-shrink` to `0` to prevent some browsers from
 *    letting these items shrink to smaller than their content's default
 *    minimum size. See http://bit.ly/1Mn35US for details.
 * 3. Use `%` instead of `vh` since `vh` is buggy in older mobile Safari.
 */
html {
  height: 100%;
}
.site-sticky-footer {
  display: flex;
  flex-direction: column;
  height: 100%; /* 1, 3 */
  > .site-header,
  > .site-footer,
  > header,
  > footer {
    flex: none; /* 2 */
  }

  .site-main-content {
    flex: 1 0 auto; /* 2 */
    width: 100%;
  }
}

.region-content {
  padding-top: 4rem;
  padding-bottom: 0;

  @include media-breakpoint-up(lg) {
    padding-bottom: 4rem;
  }
}

// Padding tweaks for left and centered notch
.layout-has-notch {
  .region-content {
    padding-top: 2rem;
  }

  @include media-breakpoint-up(lg) {
    .region-content {
      padding-top: 0;
    }
  }
}

// Section with BG image
// TODO: See if still exists in new design system
.bg-image-section {
  background-size: cover;
  background-color: $neutral-tertiary;
  padding-top: 4rem;
  padding-bottom: 3rem;
}

// Alternative layout for fluid-like content types (sujet, nouvelles)
// fluid up to a max-width
// A helper class .section-inner-media is used to deal with media margin and centering
.section-content-fluid {
  .section-inner {
    &.section-inner-md {
      margin: 0 $grid-gutter-width;
      max-width: map-get($content-max-widths, md);
      @media (min-width: map-get($content-max-widths, md) + ($grid-gutter-width * 2)) {
        margin: 0 auto;
      }
    }
    &.section-inner-lg {
      margin: 0 $grid-gutter-width;
      max-width: map-get($content-max-widths, lg);
      @media (min-width: map-get($content-max-widths, lg) + ($grid-gutter-width * 2)) {
        margin: 0 auto;
      }
    }
    &.section-inner-xl {
      margin: 0 $grid-gutter-width;
      max-width: map-get($content-max-widths, xl);
      @media (min-width: map-get($content-max-widths, xl) + ($grid-gutter-width * 2)) {
        margin: 0 auto;
      }
    }
    &.section-inner-media {
      margin: 0 auto;
      padding-top: 1rem;
      margin-bottom: 3rem;
      .media {
        > * {
          flex: 0 0 auto;
        }
        justify-content: center;

      }
    }

    &.section-divider {
      border-top: 2px solid $neutral-primary;
      margin-top: 4rem;
      padding-top: 4rem;
    }
  }
}

//
// Overlay
.overlay {
  position: fixed;
  display: none;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  cursor: pointer;
  background-color: $backdrop-bg;
  opacity: $backdrop-opacity;
  z-index: 1020;
}

// Overlay on background-image
// Might need some variant for dark and light overlay
.overlay-mid {
  position: relative;
  background-size: cover;
  background-position: center;
  &:before {
    position: absolute;
    content:" ";
    top:0;
    left:0;
    width:100%;
    height:100%;
    display: block;
    z-index:0;
    background-color: rgba(0, 0, 0, 0.5);
  }
}

//
// Sticky behavior
.sticky.is-sticky {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  z-index: 1000;
  width: 100%;
}

// Content Modules
.content-modules {
  padding-bottom: 2rem;
  h2 {
    padding-top: 2rem;
    &:first-child {
      padding-top: 0;
    }
  }
  // Use to stack module in a page content and handle spacing
  .content-module-stacked {
    margin-bottom: 2rem;
    > *:not(h2):not(h3):not(h4):not(h5):not(h6) {
      margin-bottom: 2rem;
      &:last-child {
        margin-bottom: 0;
      }
    }

    @include media-breakpoint-up(md) {
      margin-bottom: 2rem;
    }
  }
}

// Use to stack module in a page content and handle spacing
.content-module-stacked {
  margin-bottom: 2rem;
  > *:not(h2):not(h3):not(h4):not(h5):not(h6) {
    margin-bottom: 2rem;
    &:last-child {
      margin-bottom: 0;
    }
  }

  @include media-breakpoint-up(md) {
    margin-bottom: 4rem;
  }
}

// Might not needed, soon to be deprecated
// Small variants (32px)
.content-module-stacked-sm {
  margin-bottom: 2rem;
  > *:not(h2):not(h3):not(h4):not(h5):not(h6) {
    margin-bottom: 2rem;
    &:last-child {
      margin-bottom: 0;
    }
  }
}

.content-modules,
.content-module-stacked {
  // We limit this insanity to .content-modules zone
  p + p,
  p + ul,
  p + ol,
  ul + p,
  ul + ul,
  ul + ol,
  ol + p,
  ol + ul,
  ol + ol {
    margin-top: -1rem;
  }
}


// Content modules
// Comparatif
//
.content-comparatif {
  > .col,
  > [class*="col-"] {
    margin-bottom: 1rem;
    &:last-child {
      margin-bottom: 0;
    }
  }

  .content-wrapper {
    background-color: $neutral-underground-1;
    border-top: 2px solid $neutral-stroke;
    height: 100%;
    padding: 1rem;
    > :last-child {
      margin-bottom: 0;
    }
  }

  &.comparatif-columns {
    @include media-breakpoint-up(md) {
      > .col,
      > [class*="col-"] {
        margin-bottom: 0;
        &:first-child {
          padding-right: .5rem;
        }
        &:last-child {
          padding-left: .5rem;
        }
      }
    }
  }
}

// Wizard header
// Optimize and normalize - we can extend from banner and build more generic containers
.wizard-header {
  display: flex;
  justify-content: space-between;
  .hdr-container,
  .hdr-links {
    display: flex;
    > * {
      display: flex;
      justify-content: center;
      align-items: center;
    }
  }
  .hdr-title {
    color: $headings-color;
    @include font-size($font-size-base);
    line-height: $line-height-md;
    font-weight: $font-weight-bold;
    padding: 1.5rem 1rem;
  }
  .hdr-links {
    padding-right: 1.375rem;
    ul {
      margin-bottom: 0;
    }
  }
}


// Employ√©s
.main-content.employes {
  padding: 0;
  .region-content {
    padding-top: 1rem;
  }
  @include media-breakpoint-up(lg) {
    padding: 0 1rem;
  }
}
